// <auto-generated />
using System;
using FoodDiary.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FoodDiary.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210622184108_doubleWeight")]
    partial class doubleWeight
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("FoodDiary.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ActivityLevel")
                        .HasColumnType("REAL");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FoodDiary.Repositories.Entities.DiaryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DiaryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdProduct")
                        .HasColumnType("TEXT");

                    b.Property<int>("Kcal")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("DiaryEntities");
                });

            modelBuilder.Entity("FoodDiary.Repositories.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Carb")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Fat")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Kcal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Protein")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Weight")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("ProductEntities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("94d898a7-ddd2-4c6e-a884-363b726e42c4"),
                            Carb = 52,
                            Fat = 10,
                            Kcal = 345,
                            ProductName = "Muesli (Almond)",
                            Protein = 12,
                            Weight = 100.0
                        },
                        new
                        {
                            Id = new Guid("cee3610a-3497-4a2c-b356-06fee97d5178"),
                            Carb = 60,
                            Fat = 10,
                            Kcal = 383,
                            ProductName = "Wholegrain Rolled Oats",
                            Protein = 13,
                            Weight = 100.0
                        },
                        new
                        {
                            Id = new Guid("af442727-f0ea-4b25-9301-144a31d15ca7"),
                            Carb = 0,
                            Fat = 9,
                            Kcal = 144,
                            ProductName = "Firm Tofu",
                            Protein = 16,
                            Weight = 100.0
                        },
                        new
                        {
                            Id = new Guid("1710f014-1cde-456d-8841-6faa3fb2aedd"),
                            Carb = 5,
                            Fat = 11,
                            Kcal = 149,
                            ProductName = "Hummus",
                            Protein = 8,
                            Weight = 100.0
                        },
                        new
                        {
                            Id = new Guid("d5290c4f-4e51-4a41-9b3e-621ba6bd194f"),
                            Carb = 16,
                            Fat = 9,
                            Kcal = 166,
                            ProductName = "Hummus (Lite)",
                            Protein = 5,
                            Weight = 100.0
                        },
                        new
                        {
                            Id = new Guid("c27fec45-5380-4716-9bb2-c4ab0f65df81"),
                            Carb = 17,
                            Fat = 19,
                            Kcal = 262,
                            ProductName = "Hummus",
                            Protein = 6,
                            Weight = 100.0
                        },
                        new
                        {
                            Id = new Guid("4afd69bd-aa0c-4a07-a3b3-de10abafbf8e"),
                            Carb = 12,
                            Fat = 50,
                            Kcal = 610,
                            ProductName = "Peanut Butter",
                            Protein = 28,
                            Weight = 100.0
                        },
                        new
                        {
                            Id = new Guid("7735c43d-2410-467a-99f8-aad00ee32685"),
                            Carb = 18,
                            Fat = 51,
                            Kcal = 644,
                            ProductName = "Peanut Butter",
                            Protein = 28,
                            Weight = 100.0
                        },
                        new
                        {
                            Id = new Guid("5c45791c-2343-482b-82db-c4c5bbd43df1"),
                            Carb = 12,
                            Fat = 57,
                            Kcal = 666,
                            ProductName = "Tahini",
                            Protein = 26,
                            Weight = 100.0
                        },
                        new
                        {
                            Id = new Guid("4f3d3915-84e5-4f94-8448-160c677febbd"),
                            Carb = 15,
                            Fat = 1,
                            Kcal = 98,
                            ProductName = "Butter Beans",
                            Protein = 7,
                            Weight = 100.0
                        },
                        new
                        {
                            Id = new Guid("f5ef116d-16a4-4d07-a2d5-9db065eb1eb1"),
                            Carb = 16,
                            Fat = 0,
                            Kcal = 89,
                            ProductName = "Kidney Beans",
                            Protein = 5,
                            Weight = 100.0
                        },
                        new
                        {
                            Id = new Guid("0ca9e50c-6c05-4e9e-9bf2-cd38dbab7ab6"),
                            Carb = 15,
                            Fat = 0,
                            Kcal = 96,
                            ProductName = "Chickpeas",
                            Protein = 8,
                            Weight = 100.0
                        },
                        new
                        {
                            Id = new Guid("f6317c54-00e6-4437-83cb-d6db2110a685"),
                            Carb = 11,
                            Fat = 1,
                            Kcal = 70,
                            ProductName = "Lentils",
                            Protein = 4,
                            Weight = 100.0
                        },
                        new
                        {
                            Id = new Guid("461e776f-d257-4017-9ac6-4c1a214c4372"),
                            Carb = 14,
                            Fat = 1,
                            Kcal = 93,
                            ProductName = "Cannellini Beans",
                            Protein = 7,
                            Weight = 100.0
                        },
                        new
                        {
                            Id = new Guid("aed8e3b3-c2ff-43b5-a693-c8f7bb0fc259"),
                            Carb = 14,
                            Fat = 1,
                            Kcal = 93,
                            ProductName = "Beans",
                            Protein = 7,
                            Weight = 100.0
                        },
                        new
                        {
                            Id = new Guid("f1691dde-9bc9-4995-ab6d-b95827a27d8b"),
                            Carb = 15,
                            Fat = 1,
                            Kcal = 68,
                            ProductName = "Kiwifruit",
                            Protein = 1,
                            Weight = 100.0
                        },
                        new
                        {
                            Id = new Guid("1d7437c4-bc1c-4e42-ba8e-999d6638b4b2"),
                            Carb = 14,
                            Fat = 0,
                            Kcal = 58,
                            ProductName = "Apple (Granny Smith)",
                            Protein = 0,
                            Weight = 100.0
                        },
                        new
                        {
                            Id = new Guid("79304dca-aee7-4dbd-9615-ad9b6f6cc4f5"),
                            Carb = 14,
                            Fat = 0,
                            Kcal = 58,
                            ProductName = "Apple (Pink Lady)",
                            Protein = 0,
                            Weight = 100.0
                        });
                });

            modelBuilder.Entity("FoodDiary.Repositories.Entities.UserDetailsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("Bmi")
                        .HasColumnType("REAL");

                    b.Property<double>("Bmr")
                        .HasColumnType("REAL");

                    b.Property<Guid>("DiaryId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Target")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<double>("Weight")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("UserDetailsEntities");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FoodDiary.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FoodDiary.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDiary.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FoodDiary.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
