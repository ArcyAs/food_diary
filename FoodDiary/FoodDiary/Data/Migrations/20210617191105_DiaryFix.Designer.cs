// <auto-generated />
using System;
using FoodDiary.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FoodDiary.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210617191105_DiaryFix")]
    partial class DiaryFix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("FoodDiary.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ActivityLevel")
                        .HasColumnType("REAL");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FoodDiary.Repositories.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Carb")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Fat")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Kcal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Protein")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ProductEntities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec5f2a2e-f197-41da-8162-43b95e4ae8fa"),
                            Carb = 52,
                            Fat = 10,
                            Kcal = 345,
                            ProductName = "Muesli (Almond)",
                            Protein = 12
                        },
                        new
                        {
                            Id = new Guid("0a4b16c9-a845-4b4b-9c89-df16e5161397"),
                            Carb = 60,
                            Fat = 10,
                            Kcal = 383,
                            ProductName = "Wholegrain Rolled Oats",
                            Protein = 13
                        },
                        new
                        {
                            Id = new Guid("5ee7f854-c876-4121-829f-108f818be6ed"),
                            Carb = 0,
                            Fat = 9,
                            Kcal = 144,
                            ProductName = "Firm Tofu",
                            Protein = 16
                        },
                        new
                        {
                            Id = new Guid("b5bfadfd-e12a-4e48-9dfd-ff1f3ca3a0c9"),
                            Carb = 5,
                            Fat = 11,
                            Kcal = 149,
                            ProductName = "Hummus",
                            Protein = 8
                        },
                        new
                        {
                            Id = new Guid("fc5026a1-a6e8-402c-bae1-2b614b0a4e2e"),
                            Carb = 16,
                            Fat = 9,
                            Kcal = 166,
                            ProductName = "Hummus (Lite)",
                            Protein = 5
                        },
                        new
                        {
                            Id = new Guid("20603ca3-722f-40e3-aa7f-14a5c1c5cd16"),
                            Carb = 17,
                            Fat = 19,
                            Kcal = 262,
                            ProductName = "Hummus",
                            Protein = 6
                        },
                        new
                        {
                            Id = new Guid("e98e68c6-6e93-49e0-a112-b7c182502cb9"),
                            Carb = 12,
                            Fat = 50,
                            Kcal = 610,
                            ProductName = "Peanut Butter",
                            Protein = 28
                        },
                        new
                        {
                            Id = new Guid("1b94c01e-68cd-4691-8053-0b44978e3d5e"),
                            Carb = 18,
                            Fat = 51,
                            Kcal = 644,
                            ProductName = "Peanut Butter",
                            Protein = 28
                        },
                        new
                        {
                            Id = new Guid("5363c48b-e716-46fe-a757-4ec56edc30cd"),
                            Carb = 12,
                            Fat = 57,
                            Kcal = 666,
                            ProductName = "Tahini",
                            Protein = 26
                        },
                        new
                        {
                            Id = new Guid("1b473345-b880-439c-9901-fc0aa31762e2"),
                            Carb = 15,
                            Fat = 1,
                            Kcal = 98,
                            ProductName = "Butter Beans",
                            Protein = 7
                        },
                        new
                        {
                            Id = new Guid("822d2d52-eef5-49ea-8c97-a8c87863da0c"),
                            Carb = 16,
                            Fat = 0,
                            Kcal = 89,
                            ProductName = "Kidney Beans",
                            Protein = 5
                        },
                        new
                        {
                            Id = new Guid("e7cca7a9-b0d8-4ce8-b294-5ee14da3ac3f"),
                            Carb = 15,
                            Fat = 0,
                            Kcal = 96,
                            ProductName = "Chickpeas",
                            Protein = 8
                        },
                        new
                        {
                            Id = new Guid("b0b2bd1e-f090-4ef2-b1b0-c8f097fa888d"),
                            Carb = 11,
                            Fat = 1,
                            Kcal = 70,
                            ProductName = "Lentils",
                            Protein = 4
                        },
                        new
                        {
                            Id = new Guid("44d920a0-bb20-4717-8da0-8102efb54d4f"),
                            Carb = 14,
                            Fat = 1,
                            Kcal = 93,
                            ProductName = "Cannellini Beans",
                            Protein = 7
                        },
                        new
                        {
                            Id = new Guid("2056a86e-253b-4534-b39f-0ce9318877d3"),
                            Carb = 14,
                            Fat = 1,
                            Kcal = 93,
                            ProductName = "Beans",
                            Protein = 7
                        },
                        new
                        {
                            Id = new Guid("1dd111ac-803a-4c3b-a218-c1043f720167"),
                            Carb = 15,
                            Fat = 1,
                            Kcal = 68,
                            ProductName = "Kiwifruit",
                            Protein = 1
                        },
                        new
                        {
                            Id = new Guid("bf311838-3ee4-452c-9fb4-9bb80c7bd131"),
                            Carb = 14,
                            Fat = 0,
                            Kcal = 58,
                            ProductName = "Apple (Granny Smith)",
                            Protein = 0
                        },
                        new
                        {
                            Id = new Guid("1b5b4fc5-93d9-4fba-bb5d-2e7cbcd0d07d"),
                            Carb = 14,
                            Fat = 0,
                            Kcal = 58,
                            ProductName = "Apple (Pink Lady)",
                            Protein = 0
                        });
                });

            modelBuilder.Entity("FoodDiary.Repositories.Entities.UserDetailsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("Bmi")
                        .HasColumnType("REAL");

                    b.Property<double>("Bmr")
                        .HasColumnType("REAL");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Target")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<double>("Weight")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("UserDetailsEntities");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FoodDiary.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FoodDiary.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDiary.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FoodDiary.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
