// <auto-generated />
using System;
using FoodDiary.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FoodDiary.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210617181903_Diary")]
    partial class Diary
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("FoodDiary.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ActivityLevel")
                        .HasColumnType("REAL");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FoodDiary.Repositories.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Carb")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Fat")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Kcal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Protein")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ProductEntities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6edfeb91-464c-4ea0-8d34-67b5d0061553"),
                            Carb = 52,
                            Fat = 10,
                            Kcal = 345,
                            ProductName = "Muesli (Almond)",
                            Protein = 12
                        },
                        new
                        {
                            Id = new Guid("ca082324-0993-4332-a889-94fbbdca652e"),
                            Carb = 60,
                            Fat = 10,
                            Kcal = 383,
                            ProductName = "Wholegrain Rolled Oats",
                            Protein = 13
                        },
                        new
                        {
                            Id = new Guid("13101464-979e-487d-84bd-40da1954f7ca"),
                            Carb = 0,
                            Fat = 9,
                            Kcal = 144,
                            ProductName = "Firm Tofu",
                            Protein = 16
                        },
                        new
                        {
                            Id = new Guid("d8215978-c69b-4475-996a-8007d08fab84"),
                            Carb = 5,
                            Fat = 11,
                            Kcal = 149,
                            ProductName = "Hummus",
                            Protein = 8
                        },
                        new
                        {
                            Id = new Guid("9d69b063-1bbd-451c-b1bf-216a5dbb9371"),
                            Carb = 16,
                            Fat = 9,
                            Kcal = 166,
                            ProductName = "Hummus (Lite)",
                            Protein = 5
                        },
                        new
                        {
                            Id = new Guid("8b1e966a-2e89-4ec3-9542-022648bfcb76"),
                            Carb = 17,
                            Fat = 19,
                            Kcal = 262,
                            ProductName = "Hummus",
                            Protein = 6
                        },
                        new
                        {
                            Id = new Guid("4ad11665-7a29-435f-bac4-0c423a30c8d5"),
                            Carb = 12,
                            Fat = 50,
                            Kcal = 610,
                            ProductName = "Peanut Butter",
                            Protein = 28
                        },
                        new
                        {
                            Id = new Guid("f0c0c9e9-1cd8-4fb9-a592-6cc46a149284"),
                            Carb = 18,
                            Fat = 51,
                            Kcal = 644,
                            ProductName = "Peanut Butter",
                            Protein = 28
                        },
                        new
                        {
                            Id = new Guid("ee7b8375-e26a-4110-89ad-bb228ca9ada8"),
                            Carb = 12,
                            Fat = 57,
                            Kcal = 666,
                            ProductName = "Tahini",
                            Protein = 26
                        },
                        new
                        {
                            Id = new Guid("53545d7e-1394-4cb9-9530-52e19ec9dbda"),
                            Carb = 15,
                            Fat = 1,
                            Kcal = 98,
                            ProductName = "Butter Beans",
                            Protein = 7
                        },
                        new
                        {
                            Id = new Guid("fb8e0b2d-7c38-4294-a006-260177000d74"),
                            Carb = 16,
                            Fat = 0,
                            Kcal = 89,
                            ProductName = "Kidney Beans",
                            Protein = 5
                        },
                        new
                        {
                            Id = new Guid("9d51d07e-f978-4a5c-bab4-e049a36cbadc"),
                            Carb = 15,
                            Fat = 0,
                            Kcal = 96,
                            ProductName = "Chickpeas",
                            Protein = 8
                        },
                        new
                        {
                            Id = new Guid("3f108c99-9853-47c1-bb39-31f0f0406f4e"),
                            Carb = 11,
                            Fat = 1,
                            Kcal = 70,
                            ProductName = "Lentils",
                            Protein = 4
                        },
                        new
                        {
                            Id = new Guid("a70e0d07-dad1-4399-87cd-44ca471f472f"),
                            Carb = 14,
                            Fat = 1,
                            Kcal = 93,
                            ProductName = "Cannellini Beans",
                            Protein = 7
                        },
                        new
                        {
                            Id = new Guid("618d43f6-2175-4b0e-b174-6e9e1bc2bed5"),
                            Carb = 14,
                            Fat = 1,
                            Kcal = 93,
                            ProductName = "Beans",
                            Protein = 7
                        },
                        new
                        {
                            Id = new Guid("1661e023-6b96-4182-9148-a7836dc88b25"),
                            Carb = 15,
                            Fat = 1,
                            Kcal = 68,
                            ProductName = "Kiwifruit",
                            Protein = 1
                        },
                        new
                        {
                            Id = new Guid("d25ff7f9-b554-486a-89bc-20cae82ce933"),
                            Carb = 14,
                            Fat = 0,
                            Kcal = 58,
                            ProductName = "Apple (Granny Smith)",
                            Protein = 0
                        },
                        new
                        {
                            Id = new Guid("d3a3305a-a845-4742-ab70-c16e6aafb1c7"),
                            Carb = 14,
                            Fat = 0,
                            Kcal = 58,
                            ProductName = "Apple (Pink Lady)",
                            Protein = 0
                        });
                });

            modelBuilder.Entity("FoodDiary.Repositories.Entities.UserDetailsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("Bmi")
                        .HasColumnType("REAL");

                    b.Property<double>("Bmr")
                        .HasColumnType("REAL");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Target")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<double>("Weight")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("UserDetailsEntities");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FoodDiary.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FoodDiary.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDiary.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FoodDiary.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
