// <auto-generated />
using System;
using FoodDiary.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FoodDiary.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210619160100_diaryextand")]
    partial class diaryextand
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("FoodDiary.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ActivityLevel")
                        .HasColumnType("REAL");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FoodDiary.Repositories.Entities.DiaryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DiaryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdProduct")
                        .HasColumnType("TEXT");

                    b.Property<int>("Kcal")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("DiaryEntities");
                });

            modelBuilder.Entity("FoodDiary.Repositories.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Carb")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Fat")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Kcal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Protein")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ProductEntities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("223b95c7-ee79-4fda-8cee-6fc7225236d4"),
                            Carb = 52,
                            Fat = 10,
                            Kcal = 345,
                            ProductName = "Muesli (Almond)",
                            Protein = 12
                        },
                        new
                        {
                            Id = new Guid("4b8a5fa3-8c47-4edb-a5b3-fa6937254347"),
                            Carb = 60,
                            Fat = 10,
                            Kcal = 383,
                            ProductName = "Wholegrain Rolled Oats",
                            Protein = 13
                        },
                        new
                        {
                            Id = new Guid("6e0c0740-c809-4290-8ce8-20ca3612a7ca"),
                            Carb = 0,
                            Fat = 9,
                            Kcal = 144,
                            ProductName = "Firm Tofu",
                            Protein = 16
                        },
                        new
                        {
                            Id = new Guid("916d4bc6-3982-40d5-abd6-7153568545bd"),
                            Carb = 5,
                            Fat = 11,
                            Kcal = 149,
                            ProductName = "Hummus",
                            Protein = 8
                        },
                        new
                        {
                            Id = new Guid("8b070d24-3b5f-4069-9a89-e4d929e69188"),
                            Carb = 16,
                            Fat = 9,
                            Kcal = 166,
                            ProductName = "Hummus (Lite)",
                            Protein = 5
                        },
                        new
                        {
                            Id = new Guid("78f5788e-920c-4b97-a8cb-51425dc0e6cd"),
                            Carb = 17,
                            Fat = 19,
                            Kcal = 262,
                            ProductName = "Hummus",
                            Protein = 6
                        },
                        new
                        {
                            Id = new Guid("20d1b75e-94c7-4503-b21a-d7ccbee9384d"),
                            Carb = 12,
                            Fat = 50,
                            Kcal = 610,
                            ProductName = "Peanut Butter",
                            Protein = 28
                        },
                        new
                        {
                            Id = new Guid("26253da1-4033-4574-9038-15982bf1807b"),
                            Carb = 18,
                            Fat = 51,
                            Kcal = 644,
                            ProductName = "Peanut Butter",
                            Protein = 28
                        },
                        new
                        {
                            Id = new Guid("fff819ac-ac63-4b47-924c-6220274ebf3a"),
                            Carb = 12,
                            Fat = 57,
                            Kcal = 666,
                            ProductName = "Tahini",
                            Protein = 26
                        },
                        new
                        {
                            Id = new Guid("4e51d9cf-6e67-41f8-ac4c-4433d5deeeb1"),
                            Carb = 15,
                            Fat = 1,
                            Kcal = 98,
                            ProductName = "Butter Beans",
                            Protein = 7
                        },
                        new
                        {
                            Id = new Guid("672b9cca-c2e1-4763-aee1-0778e2fa1688"),
                            Carb = 16,
                            Fat = 0,
                            Kcal = 89,
                            ProductName = "Kidney Beans",
                            Protein = 5
                        },
                        new
                        {
                            Id = new Guid("70818e23-2236-4660-9ca9-35d46825e3ed"),
                            Carb = 15,
                            Fat = 0,
                            Kcal = 96,
                            ProductName = "Chickpeas",
                            Protein = 8
                        },
                        new
                        {
                            Id = new Guid("fb94a646-1460-4944-959f-5647a2fd953d"),
                            Carb = 11,
                            Fat = 1,
                            Kcal = 70,
                            ProductName = "Lentils",
                            Protein = 4
                        },
                        new
                        {
                            Id = new Guid("28fd734c-f091-418e-989f-c558026f800e"),
                            Carb = 14,
                            Fat = 1,
                            Kcal = 93,
                            ProductName = "Cannellini Beans",
                            Protein = 7
                        },
                        new
                        {
                            Id = new Guid("c90a778d-7bdf-4625-a6be-8e81b675352b"),
                            Carb = 14,
                            Fat = 1,
                            Kcal = 93,
                            ProductName = "Beans",
                            Protein = 7
                        },
                        new
                        {
                            Id = new Guid("b35474b4-0e51-42c8-9d20-1cbdbf7c5c73"),
                            Carb = 15,
                            Fat = 1,
                            Kcal = 68,
                            ProductName = "Kiwifruit",
                            Protein = 1
                        },
                        new
                        {
                            Id = new Guid("37f41d07-1cb4-4f69-9e37-b14d284a2cd2"),
                            Carb = 14,
                            Fat = 0,
                            Kcal = 58,
                            ProductName = "Apple (Granny Smith)",
                            Protein = 0
                        },
                        new
                        {
                            Id = new Guid("0b2fa161-654d-4805-b932-8f6bf4a1ea86"),
                            Carb = 14,
                            Fat = 0,
                            Kcal = 58,
                            ProductName = "Apple (Pink Lady)",
                            Protein = 0
                        });
                });

            modelBuilder.Entity("FoodDiary.Repositories.Entities.UserDetailsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("Bmi")
                        .HasColumnType("REAL");

                    b.Property<double>("Bmr")
                        .HasColumnType("REAL");

                    b.Property<Guid>("DiaryId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Target")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<double>("Weight")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("UserDetailsEntities");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FoodDiary.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FoodDiary.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDiary.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FoodDiary.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
